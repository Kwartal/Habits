//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 46 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `appleBackground`.
    static let appleBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "appleBackground")
    /// Color `blue20`.
    static let blue20 = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue20")
    /// Color `blue40`.
    static let blue40 = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue40")
    /// Color `blue50`.
    static let blue50 = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue50")
    /// Color `buttonSheet`.
    static let buttonSheet = Rswift.ColorResource(bundle: R.hostingBundle, name: "buttonSheet")
    /// Color `cognitionBackground`.
    static let cognitionBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "cognitionBackground")
    /// Color `cognitionEnd`.
    static let cognitionEnd = Rswift.ColorResource(bundle: R.hostingBundle, name: "cognitionEnd")
    /// Color `cognitionStart`.
    static let cognitionStart = Rswift.ColorResource(bundle: R.hostingBundle, name: "cognitionStart")
    /// Color `facebookBackground`.
    static let facebookBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "facebookBackground")
    /// Color `googleBackground`.
    static let googleBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "googleBackground")
    /// Color `grabberDark`.
    static let grabberDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "grabberDark")
    /// Color `gray100`.
    static let gray100 = Rswift.ColorResource(bundle: R.hostingBundle, name: "gray100")
    /// Color `gray10`.
    static let gray10 = Rswift.ColorResource(bundle: R.hostingBundle, name: "gray10")
    /// Color `gray20`.
    static let gray20 = Rswift.ColorResource(bundle: R.hostingBundle, name: "gray20")
    /// Color `gray30`.
    static let gray30 = Rswift.ColorResource(bundle: R.hostingBundle, name: "gray30")
    /// Color `gray80`.
    static let gray80 = Rswift.ColorResource(bundle: R.hostingBundle, name: "gray80")
    /// Color `green10`.
    static let green10 = Rswift.ColorResource(bundle: R.hostingBundle, name: "green10")
    /// Color `green50`.
    static let green50 = Rswift.ColorResource(bundle: R.hostingBundle, name: "green50")
    /// Color `green60`.
    static let green60 = Rswift.ColorResource(bundle: R.hostingBundle, name: "green60")
    /// Color `iconsBlack`.
    static let iconsBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "iconsBlack")
    /// Color `intellegenceBackground`.
    static let intellegenceBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "intellegenceBackground")
    /// Color `intellegenceEnd`.
    static let intellegenceEnd = Rswift.ColorResource(bundle: R.hostingBundle, name: "intellegenceEnd")
    /// Color `intellegenceStart`.
    static let intellegenceStart = Rswift.ColorResource(bundle: R.hostingBundle, name: "intellegenceStart")
    /// Color `orange80`.
    static let orange80 = Rswift.ColorResource(bundle: R.hostingBundle, name: "orange80")
    /// Color `red50`.
    static let red50 = Rswift.ColorResource(bundle: R.hostingBundle, name: "red50")
    /// Color `red60`.
    static let red60 = Rswift.ColorResource(bundle: R.hostingBundle, name: "red60")
    /// Color `rose30`.
    static let rose30 = Rswift.ColorResource(bundle: R.hostingBundle, name: "rose30")
    /// Color `rose40`.
    static let rose40 = Rswift.ColorResource(bundle: R.hostingBundle, name: "rose40")
    /// Color `rose50`.
    static let rose50 = Rswift.ColorResource(bundle: R.hostingBundle, name: "rose50")
    /// Color `sportBackground`.
    static let sportBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "sportBackground")
    /// Color `sportEnd`.
    static let sportEnd = Rswift.ColorResource(bundle: R.hostingBundle, name: "sportEnd")
    /// Color `sportStart`.
    static let sportStart = Rswift.ColorResource(bundle: R.hostingBundle, name: "sportStart")
    /// Color `storiesBackground`.
    static let storiesBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "storiesBackground")
    /// Color `trackers20`.
    static let trackers20 = Rswift.ColorResource(bundle: R.hostingBundle, name: "trackers20")
    /// Color `violet100`.
    static let violet100 = Rswift.ColorResource(bundle: R.hostingBundle, name: "violet100")
    /// Color `violet10`.
    static let violet10 = Rswift.ColorResource(bundle: R.hostingBundle, name: "violet10")
    /// Color `violet15`.
    static let violet15 = Rswift.ColorResource(bundle: R.hostingBundle, name: "violet15")
    /// Color `violet20`.
    static let violet20 = Rswift.ColorResource(bundle: R.hostingBundle, name: "violet20")
    /// Color `violet30`.
    static let violet30 = Rswift.ColorResource(bundle: R.hostingBundle, name: "violet30")
    /// Color `violet40`.
    static let violet40 = Rswift.ColorResource(bundle: R.hostingBundle, name: "violet40")
    /// Color `violet50`.
    static let violet50 = Rswift.ColorResource(bundle: R.hostingBundle, name: "violet50")
    /// Color `violet80`.
    static let violet80 = Rswift.ColorResource(bundle: R.hostingBundle, name: "violet80")
    /// Color `vkBackground`.
    static let vkBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "vkBackground")
    /// Color `white`.
    static let white = Rswift.ColorResource(bundle: R.hostingBundle, name: "white")
    /// Color `yellow50`.
    static let yellow50 = Rswift.ColorResource(bundle: R.hostingBundle, name: "yellow50")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "appleBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appleBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appleBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blue20", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue20, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blue40", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue40(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue40, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blue50", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue50(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue50, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "buttonSheet", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonSheet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonSheet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cognitionBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cognitionBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cognitionBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cognitionEnd", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cognitionEnd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cognitionEnd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cognitionStart", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cognitionStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cognitionStart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "facebookBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func facebookBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.facebookBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "googleBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func googleBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.googleBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "grabberDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grabberDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grabberDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "gray10", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gray10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gray10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "gray100", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gray100(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gray100, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "gray20", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gray20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gray20, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "gray30", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gray30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gray30, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "gray80", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gray80(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gray80, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "green10", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func green10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.green10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "green50", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func green50(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.green50, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "green60", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func green60(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.green60, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "iconsBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func iconsBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.iconsBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "intellegenceBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func intellegenceBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.intellegenceBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "intellegenceEnd", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func intellegenceEnd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.intellegenceEnd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "intellegenceStart", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func intellegenceStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.intellegenceStart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "orange80", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func orange80(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.orange80, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "red50", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func red50(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.red50, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "red60", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func red60(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.red60, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "rose30", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func rose30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.rose30, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "rose40", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func rose40(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.rose40, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "rose50", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func rose50(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.rose50, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "sportBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func sportBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.sportBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "sportEnd", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func sportEnd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.sportEnd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "sportStart", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func sportStart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.sportStart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "storiesBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func storiesBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.storiesBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "trackers20", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func trackers20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.trackers20, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "violet10", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func violet10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.violet10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "violet100", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func violet100(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.violet100, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "violet15", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func violet15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.violet15, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "violet20", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func violet20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.violet20, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "violet30", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func violet30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.violet30, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "violet40", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func violet40(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.violet40, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "violet50", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func violet50(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.violet50, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "violet80", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func violet80(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.violet80, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "vkBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func vkBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.vkBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "white", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "yellow50", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yellow50(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yellow50, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "appleBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appleBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appleBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blue20", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue20(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue20.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blue40", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue40(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue40.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blue50", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue50(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue50.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "buttonSheet", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonSheet(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonSheet.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cognitionBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func cognitionBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cognitionBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cognitionEnd", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func cognitionEnd(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cognitionEnd.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cognitionStart", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func cognitionStart(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cognitionStart.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "facebookBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func facebookBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.facebookBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "googleBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func googleBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.googleBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "grabberDark", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grabberDark(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grabberDark.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "gray10", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func gray10(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.gray10.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "gray100", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func gray100(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.gray100.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "gray20", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func gray20(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.gray20.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "gray30", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func gray30(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.gray30.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "gray80", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func gray80(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.gray80.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "green10", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func green10(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.green10.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "green50", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func green50(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.green50.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "green60", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func green60(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.green60.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "iconsBlack", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func iconsBlack(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.iconsBlack.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "intellegenceBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func intellegenceBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.intellegenceBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "intellegenceEnd", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func intellegenceEnd(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.intellegenceEnd.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "intellegenceStart", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func intellegenceStart(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.intellegenceStart.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "orange80", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func orange80(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.orange80.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "red50", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func red50(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.red50.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "red60", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func red60(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.red60.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "rose30", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func rose30(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.rose30.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "rose40", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func rose40(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.rose40.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "rose50", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func rose50(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.rose50.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "sportBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func sportBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.sportBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "sportEnd", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func sportEnd(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.sportEnd.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "sportStart", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func sportStart(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.sportStart.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "storiesBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func storiesBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.storiesBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "trackers20", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func trackers20(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.trackers20.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "violet10", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func violet10(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.violet10.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "violet100", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func violet100(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.violet100.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "violet15", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func violet15(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.violet15.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "violet20", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func violet20(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.violet20.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "violet30", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func violet30(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.violet30.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "violet40", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func violet40(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.violet40.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "violet50", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func violet50(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.violet50.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "violet80", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func violet80(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.violet80.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "vkBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func vkBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.vkBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "white", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func white(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.white.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "yellow50", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func yellow50(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.yellow50.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 11 images.
  struct image {
    /// Image `Custom`.
    static let custom = Rswift.ImageResource(bundle: R.hostingBundle, name: "Custom")
    /// Image `Debil`.
    static let debil = Rswift.ImageResource(bundle: R.hostingBundle, name: "Debil")
    /// Image `Man`.
    static let man = Rswift.ImageResource(bundle: R.hostingBundle, name: "Man")
    /// Image `Pomidoro`.
    static let pomidoro = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pomidoro")
    /// Image `Shadow Fight`.
    static let shadowFight = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shadow Fight")
    /// Image `Tabata`.
    static let tabata = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tabata")
    /// Image `Test2`.
    static let test2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Test2")
    /// Image `Test3`.
    static let test3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Test3")
    /// Image `Test4`.
    static let test4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Test4")
    /// Image `Test`.
    static let test = Rswift.ImageResource(bundle: R.hostingBundle, name: "Test")
    /// Image `Woman`.
    static let woman = Rswift.ImageResource(bundle: R.hostingBundle, name: "Woman")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Custom", bundle: ..., traitCollection: ...)`
    static func custom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.custom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Debil", bundle: ..., traitCollection: ...)`
    static func debil(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.debil, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Man", bundle: ..., traitCollection: ...)`
    static func man(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.man, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pomidoro", bundle: ..., traitCollection: ...)`
    static func pomidoro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pomidoro, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Shadow Fight", bundle: ..., traitCollection: ...)`
    static func shadowFight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shadowFight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Tabata", bundle: ..., traitCollection: ...)`
    static func tabata(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabata, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Test", bundle: ..., traitCollection: ...)`
    static func test(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.test, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Test2", bundle: ..., traitCollection: ...)`
    static func test2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.test2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Test3", bundle: ..., traitCollection: ...)`
    static func test3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.test3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Test4", bundle: ..., traitCollection: ...)`
    static func test4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.test4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Woman", bundle: ..., traitCollection: ...)`
    static func woman(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.woman, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
